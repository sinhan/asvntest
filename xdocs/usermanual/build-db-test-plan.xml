<?xml version="1.0"?>
<!--
   $Header$
   Copyright 2001-2004 The Apache Software Foundation
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<document prev="build-adv-web-test-plan.html" next="build-ftp-test-plan.html" date="$Date: 2005-03-12 07:30:41 -0800 (Sat, 12 Mar 2005) $">

<properties>
  <author email="mramshaw@alumni.concordia.ca">Martin Ramshaw</author>
  <title>User's Manual: Building a Database Test Plan</title>
</properties>

<body>

<section name="7. Building a Database Test Plan" anchor="building">
<p>In this section, you will learn how to create a basic
<a href="build-test-plan.html">Test Plan</a> to test a database server.
You will create ten users that send five SQL requests to the database server.
Also, you will tell the users to run their tests three times. So, the total number
of requests is (10 users) x (2 requests) x (repeat 3 times) = 60 JDBC requests.
To construct the Test Plan, you will use the following elements:
<a href="test_plan.html#thread_group">Thread Group</a>,
<complink name="JDBC Request"/>, <complink name="Graph Results"/>.</p>

<note>This example uses the PostgreSQL <b>org.postgresql.Driver</b> database driver.
To use this driver, its containing .jar file must be copied to the extension
.../lib/ directory (see <a href="get-started.html#classpath">JMeter's Classpath</a>
for more details). Otherwise, expect a substantial amount of stack traces when
running this test plan.</note>

</section>

<section name="7.1 Adding Users" anchor="adding_users">
<p>The first step you want to do with every JMeter Test Plan is to add a
<a href="test_plan.html#thread_group">Thread Group</a> element. The Thread Group
tells JMeter the number of users you want to simulate, how often the users should
send requests, and the how many requests they should send.</p>

<p>Go ahead and add the ThreadGroup element by first selecting the Test Plan,
clicking your right mouse button to get the Add menu, and then select
Add --&gt; ThreadGroup.</p>

<p>You should now see the Thread Group element under Test Plan. If you do not
see the element, then "expand" the Test Plan tree by clicking on the
Test Plan element.</p>

<p>Next, you need to modify the default properties. Select the Thread Group element
in the tree, if you have not already selected it. You should now see the Thread
Group Control Panel in the right section of the JMeter window (see Figure 7.1
below)</p>

<figure image="webtest/threadgroup.png">
Figure 7.1. Thread Group with Default Values</figure>

<p>Start by providing a more descriptive name for our Thread Group. In the name
field, enter JDBC Users.</p>

<note>You will need a valid database, database table, and user-level access to that
table. In the example shown here, the database is 'mydb' and the tables' name is
'Stocks'.</note>

<p>Next, increase the number of users (called threads) to 10.</p>

<p>In the next field, the Ramp-Up Period, leave the the default value of 0
seconds.  This property tells JMeter how long to delay between starting each
user. For example, if you enter a Ramp-Up Period of 5 seconds, JMeter will
finish starting all of your users by the end of the 5 seconds.  So, if we have
5 users and a 5 second Ramp-Up Period, then the delay between starting users
would be 1 second (5 users / 5 seconds = 1 user per second).  If you set the
value to 0, then JMeter will immediately start all of your users.</p>

<p>Finally, clear the checkbox labeled "Forever", and enter a value of 3 in
the Loop Count field.  This property tells JMeter how many times to repeat your
test. If you enter a loop count value of 0, then JMeter will run your test only
once. To have JMeter repeatedly run your Test Plan, select the Forever
checkbox.</p>

<note>In most applications, you have to manually accept
changes you make in a Control Panel.  However, in JMeter, the Control Panel
automatically accepts your changes as you make them.  If you change the
name of an element, the tree will be updated with the new text after you
leave the Control Panel (for example, when selecting another tree element).</note>

<p>See Figure 7.2 for the completed JDBC Users Thread Group.</p>

<figure image="jdbctest/threadgroup2.png">
Figure 7.2. JDBC Users Thread Group</figure>

</section>

<section name="7.2 Adding JDBC Requests" anchor="adding_requests">
<p>Now that we have defined our users, it is time to define the tasks that they
will be performing.  In this section, you will specify the JDBC requests to
perform.</p>

<note>Although there are <complink name="JDBC Database Connection Pool Defaults"/>,
<complink name="JDBC Database Login Defaults"/>, and
<complink name="JDBC SQL Query Defaults"/> components, they will not be used
in this example.</note>

<p>Begin by selecting the JDBC Users element. Click your right mouse button
to get the Add menu, and then select Add --&gt; Sampler --&gt; JDBC Request.
Then, select this new element to view its Control Panel (see Figure 7.3).</p>

<figure image="jdbctest/JDBCRequest.png">
Figure 7.3. JDBC Request</figure>

<p>In our Test Plan, we will make two JDBC requests. The first one is for
Eastman Kodak stock, and the second is Pfizer stock (obviously you should
change these to examples appropriate for your particular database). These
are illustrated below.</p>

<note>JMeter sends requests in the order that you add them to the tree.</note>

<p>Start by editing the following properties (see Figure 7.4):
<ol>
<li>Change the Name to "Kodak".</li>
<li>Enter the JDBC URL field.</li>
<li>Enter the Driver Class field.</li>
<li>Change the Number of Connections in Pool field to "1".</li>
<li>Change the Max. Usage For Each Connection field to "1".</li>
<li>Enter the Username field.</li>
<li>Enter the Password field.</li>
<li>Enter the SQL Query String field.</li>
</ol>
</p>

<figure image="jdbctest/JDBCRequest2.png">
Figure 7.4. JDBC Request for Eastman Kodak stock</figure>

<p>Next, add the second JDBC Request and edit the following properties (see
Figure 7.5):
<ol>
<li>Change the Name to "Pfizer".</li>
<li>Enter the JDBC URL field.</li>
<li>Enter the Driver Class field.</li>
<li>Change the Number of Connections in Pool field to "1".</li>
<li>Change the Max. Usage For Each Connection field to "1".</li>
<li>Enter the Username field.</li>
<li>Enter the Password field.</li>
<li>Enter the SQL Query String field.</li>
</ol>
</p>

<figure image="jdbctest/JDBCRequest3.png">
Figure 7.6. JDBC Request for Pfizer stock</figure>

</section>

<section name="7.3 Adding a Listener to View/Store the Test Results" anchor="adding_listener">
<p>The final element you need to add to your Test Plan is a
<a href="component_reference.html#listeners">Listener</a>. This element is
responsible for storing all of the results of your JDBC requests in a file
and presenting a visual model of the data.</p>

<p>Select the JDBC Users element and add a <complink name="Graph Results"/>
listener (Add --&gt; Listener --&gt; Graph Results).</p>

<figure image="jdbctest/graph-results.png">
Figure 7.6. Graph results Listener</figure>

</section>

<section name="7.4 Saving the Test Plan" anchor="saving">
<p>Although it is not required, we recommend that you save the Test Plan to a
file before running it.  To save the Test Plan, select Save Test Plan from the
File menu (with the latest release, it is no longer necessary to select the
Test Plan element first).</p>

<note>JMeter allows you to save the entire Test Plan tree or
only a portion of it.  To save only the elements located in a particular "branch"
of the Test Plan tree, select the Test Plan element in the tree from which to start
the "branch", and then click your right mouse button to access the Save As menu item.
Alternatively, select the appropriate Test Plan element  and then select Save As from
the Edit menu.
</note>

</section>

<section name="7.5 Running the Test Plan" anchor="running">

<p>From the Run menu, select Run.</p>

<note>JMeter lights up a green square in the upper-right-hand corner to indicate if a
test is currently running.  The square is turned gray when all tests stop.  Even after
you select "stop", the green light will stay on until all test threads have exited.</note>

</section>

</body>
</document>
