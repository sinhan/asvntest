<?xml version="1.0"?>

<!--
   $Header$
   Copyright 2001-2004 The Apache Software Foundation
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
	
<document prev="remote-test.html" next="boss.html" date="$Date: 2004-03-23 09:00:58 -0800 (Tue, 23 Mar 2004) $">

<properties>
  <title>User's Manual: Best Practices</title>
</properties>

<body>

<section name="13. Best Practices" anchor="best_practices">
</section>

<section name="13.1 Limit the Number of Threads" anchor="limit_threads">
<p>Your hardware's capabilities will limit the number of threads you can effectively
run with JMeter.  It will also depend on how fast your server is (a faster server
gives makes JMeter work harder since it returns request quicker).  The more
JMeter works, the less accurate its timing information will be.  The more work
JMeter does, the more each thread has to wait to get access to the CPU, the more
inflated the timing information gets.  If you need large-scale load testing, consider
<a href="remote-test.html">running JMeter remotely</a> across multiple machines.</p>
</section>

<section name="13.2 Where to Put the Cookie Manager" anchor="put_cookie_manager">
<p>See <a href="build-web-test-plan.html#adding_cookie_support">Building a Web Test</a>
for information.</p>
</section>

<section name="13.3 Where to Put the Authorization Manager" anchor="put_auth_manager">
<p>See <a href="build-adv-web-test-plan.html#header_manager">Building an Advanced
Web Test</a> for information.</p>
</section>

<section name="13.4 Using the Proxy Server" anchor="proxy_server">
<p>Refer to <complink name="HTTP Proxy Server"/> for details on setting up the proxy
server. The most important thing to do is filter out all requests you aren't
interested in.  For instance, there's no point in recording image requests (JMeter can
be instructed to download all images on a page - see <complink name="HTTP Request"/>).
These will just clutter your test plan.  Most likely, there is an extension all your files
share, such as .jsp, .asp, .php, .html or the like. These you should "include" by
entering ".*\.jsp" as an "Include Pattern". </p>
<p>Alternatively, you can exclude images by entering ".*\.gif" as an "Exclude Pattern".
Depending on your application, this may or may not be a better way to go.  You may
also have to exclude stylesheets, javascript files, and other included files.  Test
out your settings to verify you are recording what you want, and then erase and start
fresh.</p>
<!--TODO: most uses for include/exclude are now
covered by the Grouping features. include/exclude may still be useful to filter hosts out, so
that regular browsing with the proxy enabled and the browser configured won't fill your test
plan with crap. Think about other uses. -->
<p>The Proxy Server expects to find a ThreadGroup element with a Recording Controller
under it where it will record HTTP Requests to.  This conveniently packages all your samples under one
controller, which can be given a name that describes the test case.</p><!--TODO: is this best practice? I don't think so!-->
<p>Now, go through the steps of a Test Case.  If you have no pre-defined test cases, use
JMeter to record your actions to define your test cases.  Once you have finished a
definite series of steps, save the entire test case in an appropriately named file.  Then, wipe
clean and start a new test case.  By doing this, you can quickly record a large number of
test case "rough drafts".</p><!--TODO: no need to wipe out now - you can create a new controller and
resume recording into it-->
<p>One of the most useful features of the Proxy Server is that you can abstract out
certain common elements from the recorded samples.  By defining some
<a href="functions.html">user-defined variables</a> at the Test Plan level or in
<complink name="User Defined Variables"/> elements, you can have JMeter automatically
replace values in you recorded samples.  For instance, if you are testing an app on
server "xxx.yyy.com", then you can define a variable called "server" with the value of
"xxx.yyy.com", and anyplace that value is found in your recorded samples will be replaced
with "${server}".</p><!--TODO: Describe how to use this to record against one server[name]
and run against another. Actually, this particular example may be beter for the HTTP Request Defaults...
a good similar example for the variables is http vs. https.-->
<!--TODO: Hey! We need to mention that https is not supported and how to work around that!-->
<!--SUMMARY of all TODO's above: we need some actual usage to identify best practices
with this new features.-->
</section>

</body>
</document>
