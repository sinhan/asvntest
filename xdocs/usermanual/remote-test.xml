<?xml version="1.0"?>
<document>

<properties>
  <title>User's Manual: Remote Testing</title>
</properties>

<body>

<section name="10. Remote Testing">

<p>In the event that your JMeter client machine is unable, performance-wise, to simulate 
enough users to stress your server, an option exists to control multiple, remote JMeter
engines from a single JMeter GUI client.  By running JMeter remotely, you can replicate 
a test across many low-end computers and thus simulate a larger load on the server.  One
instance of the JMeter GUI client can control any number of remote JMeter instances, and collect
all the data from them.  This offers the following features: 


<ul>
<li>True performance measurment without network bottlenecks </li>
<li>Fast responsive GUI </li>
<li>Saving of test samples to a local machine </li>
<li>Managment of multiple JMeterEngines from a single machine </li>
</ul>
</p>

<p>Note that while you can indeed execute the JMeterEngine on your application 
server, you need to be mindful of the fact that this will be adding processing 
overhead on the application server and thus your testing results will be 
somewhat tainted.  The recommended approach is to have one or more machines on
the same Ethernet segment as your application server that you configure to run
the JMeterEngine.  This will minimize the impact of the network on the test 
results without impacting the performance of the application serer 
itself.
</p>

<p><b>Step 1: Start the RMI Registry</b></p>
<p>JMeter uses Remote Method Invocation (RMI) as the remote communication mechanism.  Therefore, you need
to run the RMI Registry application (which is named, "rmiregistry") that comes with the JDK and is located in the "bin" 
directory.  Before running rmiregistry, make sure that the following jars are in your system claspath:
<ul>
	<li>JMETER_HOME/lib/ext/ApacheJMeter_core.jar</li>
	<li>JMETER_HOME/lib/jorphan.jar</li>
	<li>JMETER_HOME/lib/logkit-1.0.1.jar</li>
</ul>
The 
rmiregistry application needs access to certain JMeter classes.  Run rmiregistry with no parameters.  By default the 
application listens to port 1099.</p>

<p><b>Step 2: Start the JMeter Server</b></p>
<p>Once the RMI Registry application is running, start the JMeter Server.  
Use the "-s" option with the jmeter startup script ("jmeter -s").</p>

<p><b>Step 3: Add the server IP to your client's Properties File</b></p>
<p>Edit the properties file <i>on the controlling JMeter machine</i>.  In /bin/jmeter.properties, find the property named, "remote_hosts", and   
add the value of your running JMeter server's IP address.  Multiple such servers can be added, comma-delimited.</p>

<p><b>Step 4: Start the JMeter Client</b></p>
<p>Now you are ready to start the controlling JMeter client. For MS-Windows, start the client with the script "bin/jmeter.bat".  For UNIX, 
use the script "bin/jmeter".  You will notice that the Run menu contains two new sub-menus: "Remote Start" and "Remote Stop" 
(see figure 1). These menus contain the client that you set in the properties file.  Use the remote start and stop instead of the 
normal JMeter start and stop menu items.</p>
<p><img src="../images/screenshots/remote/run-menu00.gif" width="232" height="156"></img>
<br>Figure 1 - Run Menu</br></p>

</section>

</body>
</document>
